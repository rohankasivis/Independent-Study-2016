upon init 
{
  adjacent := {};
  local_mass := O;
  aggregate_mass := O;
  balance := [];
  levels := [];
  broadcast := false;
}

upon receive New(j) 
{
  send(j, Status(0, 0));
  adjacent := adjacent cup { j };
  balance := balance[j |-> O];
}

upon receive Fail(j) /\ balance(j) = m
{
  adjacent := adjacent \ { j };
  aggregate_mass := aggregate_mass + m;
  balance := balance \ { j };
}

upon receive Aggregate(j, m) /\ balance(j) = m' 
{
  aggregate_mass := aggregate_mass + m;
  balance := balance[j |-> m' - m];  
}

upon receive Local(m) 
{
  aggregate_mass := aggregate_mass + m - local_mass;
  local_mass := m;
}

upon receive Status(j, lvo) 
{
  skip;
}
